definitions:
  # mac_mini_m1: &mac_mini_m1
  #  instance_type: mac_mini_m1
  # max_build_duration: 60

  environment:
    app_details:
      vars:
        VERSION_NAME: $VERSION_NAME
        VERSION_CODE: $VERSION_CODE
        KEY_STORE: $KEY_STORE
        CM_KEYSTORE_PASSWORD: $CM_KEYSTORE_PASSWORD
        CM_KEY_ALIAS: $CM_KEY_ALIAS
        CM_KEY_PASSWORD: $CM_KEY_PASSWORD
        APP_NAME: $APP_NAME
        ORG_NAME: $ORG_NAME
        IS_SPLASH: $IS_SPLASH
        SPLASH: $SPLASH
        SPLASH_BG: $SPLASH_BG
        SPLASH_BG_COLOR: $SPLASH_BG_COLOR
        SPLASH_TAGLINE: $SPLASH_TAGLINE
        SPLASH_TAGLINE_COLOR: $SPLASH_TAGLINE_COLOR
        SPLASH_ANIMATION: $SPLASH_ANIMATION
        SPLASH_DURATION: $SPLASH_DURATION
        LOGO_URL: $LOGO_URL
        WEB_URL: $WEB_URL
        firebase_config_android: $firebase_config_android
        firebase_config_ios: $firebase_config_ios
        APNS_KEY_ID: $APNS_KEY_ID
        APPLE_TEAM_ID: $APPLE_TEAM_ID
        APNS_AUTH_KEY_URL: $APNS_AUTH_KEY_URL
        APP_STORE_CONNECT_PRIVATE_KEY: $APP_STORE_CONNECT_PRIVATE_KEY
        APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_CONNECT_ISSUER_ID
        APP_STORE_CONNECT_KEY_IDENTIFIER: $APP_STORE_CONNECT_KEY_IDENTIFIER
        CERT_URL: $CERT_URL
        CERT_PASSWORD: $CERT_PASSWORD
        PROFILE_URL: $PROFILE_URL
        PKG_NAME: $PKG_NAME
        BUNDLE_ID: $BUNDLE_ID
        EMAIL_ID: $EMAIL_ID
        PUSH_NOTIFY: $PUSH_NOTIFY
        IS_CAMERA: $IS_CAMERA
        IS_LOCATION: $IS_LOCATION
        IS_MIC: $IS_MIC
        IS_NOTIFICATION: $IS_NOTIFICATION
        IS_CONTACT: $IS_CONTACT
        IS_BIOMETRIC: $IS_BIOMETRIC
        IS_CALENDAR: $IS_CALENDAR
        IS_STORAGE: "true" # Always true by default
        IS_PULLDOWN: $IS_PULLDOWN
        IS_BOTTOMMENU: $IS_BOTTOMMENU
        IS_CHATBOT: $IS_CHATBOT
        BOTTOMMENU_ITEMS: $BOTTOMMENU_ITEMS
        BOTTOMMENU_BG_COLOR: $BOTTOMMENU_BG_COLOR
        BOTTOMMENU_ICON_COLOR: $BOTTOMMENU_ICON_COLOR
        BOTTOMMENU_TEXT_COLOR: $BOTTOMMENU_TEXT_COLOR
        BOTTOMMENU_FONT: $BOTTOMMENU_FONT
        BOTTOMMENU_FONT_SIZE: $BOTTOMMENU_FONT_SIZE
        BOTTOMMENU_FONT_BOLD: $BOTTOMMENU_FONT_BOLD
        BOTTOMMENU_FONT_ITALIC: $BOTTOMMENU_FONT_ITALIC
        BOTTOMMENU_ACTIVE_TAB_COLOR: $BOTTOMMENU_ACTIVE_TAB_COLOR
        BOTTOMMENU_ICON_POSITION: $BOTTOMMENU_ICON_POSITION
        BOTTOMMENU_VISIBLE_ON: $BOTTOMMENU_VISIBLE_ON
        IS_DEEPLINK: $IS_DEEPLINK
        IS_LOAD_IND: $IS_LOAD_IND

  artifacts:
    #- &ipa_file build/ios/ipa/*.ipa
    #- &xcode_log /tmp/xcodebuild_logs/*.log
    #- &dsym $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    # - &app $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
    #    - &android_abb build/**/outputs/**/*.aab
    #    - &android_apk build/**/outputs/**/*.apk
#    - &android_abb build/**/outputs/**/*.aab
#    - &android_apk build/**/outputs/**/*.apk
#    - &ios_app build/ios/ipa/*.ipa
    #- &android_mapping_txt build/**/outputs/**/mapping.txt
    #3- &flutter_drive_log flutter_drive.log

  email_release: &email_release
    email:
      recipients:
        - $EMAIL_ID
        # - thamaraikannan137@gmail.com
      notify:
        success: true
        failure: true

  scripts:
    - &permission_android
      name: Inject Android permissions into AndroidManifest.xml
      script:
        echo "üõ†Ô∏è Starting Android permissions injection..."
        chmod +x ./lib/scripts/inject_permissions_android.sh
        ./lib/scripts/inject_permissions_android.sh


    - &permission_ios
      name: Inject iOS permission strings into Info.plist
      script: ./lib/scripts/inject_ios_permissions.sh

    - &debug_env
      name: Debug Environment Variables
      script:
        echo "üõ†Ô∏è Starting debug environment variables..."
        chmod +x ./lib/scripts/debug_env.sh
        ./lib/scripts/debug_env.sh


    - &get_splash
      name: Get splash screen image from splash image from Url
      script: |
        chmod +x ./lib/scripts/get_splash.sh
        ./lib/scripts/get_splash.sh

    - &change_proj_name
      name: Change Project Name
      script:
        echo "Starting project rename step..."
        chmod +x ./lib/scripts/change_proj_name.sh
        ./lib/scripts/change_proj_name.sh

    - &get_logo
      name: Get Logo Image from URL
      script:
        echo "Starting logo download step..."
        chmod +x ./lib/scripts/get_logo.sh
        ./lib/scripts/get_logo.sh

    - &set_launcher_icons
      name: Generate Launcher Icons
      script: |
        echo "üöÄ Generating launcher icons"

        flutter pub get

        # Generates launcher icons using flutter_launcher_icons configuration in pubspec.yaml
        flutter pub run flutter_launcher_icons

        echo "‚úÖ Launcher icons generated successfully"

    - &change_app_name
      name: Change app name
      script: |
        chmod +x ./lib/scripts/change_app_name.sh
        ./lib/scripts/change_app_name.sh

    - &Inject_Firebase_iOS_Push
      name: Firebase Push Notification Setup for iOS
      script: |
        chmod +x ./lib/scripts/inject_firebase_ios_push.sh
        ./lib/scripts/inject_firebase_ios_push.sh

    - &Inject_Firebase_Services
      name: Inject Google Services Plugin
      script: |
        chmod +x ./lib/scripts/inject_firebase_services.sh
        ./lib/scripts/inject_firebase_services.sh

    - &get_json
      name: Get JSON file & Prepare Firebase configuration
      script: |
        chmod +x ./lib/scripts/get_json.sh
        ./lib/scripts/get_json.sh

    - &Update_SDK_Version
      name: Updating SDK Version for Android & iOS (Conditional)
      script: |
        chmod +x ./lib/scripts/update_sdk_version.sh
        ./lib/scripts/update_sdk_version.sh

    - &update_package_names
      name: Update Android & iOS Package Name / Bundle ID
      script: |
        chmod +x ./lib/scripts/update_package_name.sh
        ./lib/scripts/update_package_name.sh
    


    - &build_apk
      name: Building Apk with Feature Flags
      script: |
        echo "üî¢ VERSION_NAME: $VERSION_NAME"
        echo "üî¢ VERSION_CODE: $VERSION_CODE"
         # Default values
        VERSION_NAME="${VERSION_NAME:-1.0.0}"
        VERSION_CODE="${VERSION_CODE:-100}"

        # Check if VERSION_NAME is empty or not set
        if [ -z "$VERSION_NAME" ]; then
          VERSION_NAME=$DEFAULT_VERSION_NAME
          echo "üî¢ Setting DEFAULT_VERSION_NAME"
        fi

        # Check if VERSION_CODE is empty or not set
        if [ -z "$VERSION_CODE" ]; then
          VERSION_CODE=$DEFAULT_VERSION_CODE
          echo "üî¢ Setting DEFAULT_VERSION_CODE"
        fi

        echo "üî¢ VERSION_NAME: $VERSION_NAME"
        echo "üî¢ VERSION_CODE: $VERSION_CODE"

        echo "üîß Ensuring valid version in pubspec.yaml: $VERSION_NAME+$VERSION_CODE"
        if grep -q "^version: " pubspec.yaml; then
          sed -i.bak -E "s/^version: .*/version: $VERSION_NAME+$VERSION_CODE/" pubspec.yaml
          else
        echo "version: $VERSION_NAME+$VERSION_CODE" >> pubspec.yaml
          fi

        flutter pub get
        if [ $? -ne 0 ]; then
        echo "‚ùå Failed to get Flutter dependencies"
        exit 1
        fi

        echo "‚úÖ Building APK..."
        flutter build apk --release \
            --dart-define=WEB_URL="$WEB_URL" \
            --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
            --dart-define=PKG_NAME="$PKG_NAME" \
            --dart-define=APP_NAME="$APP_NAME" \
            --dart-define=ORG_NAME="$ORG_NAME" \
            --dart-define=VERSION_NAME="$VERSION_NAME" \
            --dart-define=VERSION_CODE="$VERSION_CODE" \
            --dart-define=EMAIL_ID="$EMAIL_ID" \
            --dart-define=IS_SPLASH="$IS_SPLASH" \
            --dart-define=SPLASH="$SPLASH" \
            --dart-define=SPLASH_BG="$SPLASH_BG" \
            --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
            --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
            --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
            --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
            --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
            --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
            --dart-define=LOGO_URL="$LOGO_URL" \
            --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
            --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
            --dart-define=BOTTOMMENU_BG_COLOR="$BOTTOMMENU_BG_COLOR" \
            --dart-define=BOTTOMMENU_ICON_COLOR="$BOTTOMMENU_ICON_COLOR" \
            --dart-define=BOTTOMMENU_TEXT_COLOR="$BOTTOMMENU_TEXT_COLOR" \
            --dart-define=BOTTOMMENU_FONT="$BOTTOMMENU_FONT" \
            --dart-define=BOTTOMMENU_FONT_SIZE="$BOTTOMMENU_FONT_SIZE" \
            --dart-define=BOTTOMMENU_FONT_BOLD="$BOTTOMMENU_FONT_BOLD" \
            --dart-define=BOTTOMMENU_FONT_ITALIC="$BOTTOMMENU_FONT_ITALIC" \
            --dart-define=BOTTOMMENU_ACTIVE_TAB_COLOR="$BOTTOMMENU_ACTIVE_TAB_COLOR" \
            --dart-define=BOTTOMMENU_ICON_POSITION="$BOTTOMMENU_ICON_POSITION" \
            --dart-define=BOTTOMMENU_VISIBLE_ON="$BOTTOMMENU_VISIBLE_ON" \
            --dart-define=IS_DEEPLINK="$IS_DEEPLINK" \
            --dart-define=IS_LOAD_IND="$IS_LOAD_IND" \
            --dart-define=IS_CAMERA="$IS_CAMERA" \
            --dart-define=IS_LOCATION="$IS_LOCATION" \
            --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
            --dart-define=IS_MIC="$IS_MIC" \
            --dart-define=IS_CONTACT="$IS_CONTACT" \
            --dart-define=IS_CALENDAR="$IS_CALENDAR" \
            --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
            --dart-define=IS_STORAGE="$IS_STORAGE" \
            --dart-define=firebase_config_android="$firebase_config_android" \
            --dart-define=firebase_config_ios="$firebase_config_ios" \
            --dart-define=APNS_KEY_ID="$APNS_KEY_ID" \
            --dart-define=APPLE_TEAM_ID="$APPLE_TEAM_ID" \
            --dart-define=APNS_AUTH_KEY_URL="$APNS_AUTH_KEY_URL" \
            --dart-define=KEY_STORE="$KEY_STORE" \
            --dart-define=CM_KEYSTORE_PASSWORD="$CM_KEYSTORE_PASSWORD" \
            --dart-define=CM_KEY_ALIAS="$CM_KEY_ALIAS" \
            --dart-define=CM_KEY_PASSWORD="$CM_KEY_PASSWORD" > flutter_build_apk.log
        if [ $? -ne 0 ]; then
        echo "‚ùå APK build failed"
        cat flutter_build_apk.log
        exit 1
        fi
        echo "‚úÖ APK build completed."

    - &build_apk_release
      name: Building Apk with Feature Flags
      script: |
        
        flutter clean
        DART_DEFINES="\
              --dart-define=WEB_URL=\"$WEB_URL\" \
              --dart-define=PUSH_NOTIFY=\"$PUSH_NOTIFY\" \
              --dart-define=PKG_NAME=\"$PKG_NAME\" \
              --dart-define=APP_NAME=\"$APP_NAME\" \
              --dart-define=ORG_NAME=\"$ORG_NAME\" \
              --dart-define=VERSION_NAME=\"$VERSION_NAME\" \
              --dart-define=VERSION_CODE=\"$VERSION_CODE\" \
              --dart-define=EMAIL_ID=\"$EMAIL_ID\" \
              --dart-define=IS_SPLASH=\"$IS_SPLASH\" \
              --dart-define=SPLASH=\"$SPLASH\" \
              --dart-define=SPLASH_BG=\"$SPLASH_BG\" \
              --dart-define=SPLASH_ANIMATION=\"$SPLASH_ANIMATION\" \
              --dart-define=SPLASH_BG_COLOR=\"$SPLASH_BG_COLOR\" \
              --dart-define=SPLASH_TAGLINE=\"$SPLASH_TAGLINE\" \
              --dart-define=SPLASH_TAGLINE_COLOR=\"$SPLASH_TAGLINE_COLOR\" \
              --dart-define=SPLASH_DURATION=\"$SPLASH_DURATION\" \
              --dart-define=IS_PULLDOWN=\"$IS_PULLDOWN\" \
              --dart-define=LOGO_URL=\"$LOGO_URL\" \
              --dart-define=IS_BOTTOMMENU=\"$IS_BOTTOMMENU\" \
              --dart-define=BOTTOMMENU_ITEMS=\"$BOTTOMMENU_ITEMS\" \
              --dart-define=BOTTOMMENU_BG_COLOR=\"$BOTTOMMENU_BG_COLOR\" \
              --dart-define=BOTTOMMENU_ICON_COLOR=\"$BOTTOMMENU_ICON_COLOR\" \
              --dart-define=BOTTOMMENU_TEXT_COLOR=\"$BOTTOMMENU_TEXT_COLOR\" \
              --dart-define=BOTTOMMENU_FONT=\"$BOTTOMMENU_FONT\" \
              --dart-define=BOTTOMMENU_FONT_SIZE=\"$BOTTOMMENU_FONT_SIZE\" \
              --dart-define=BOTTOMMENU_FONT_BOLD=\"$BOTTOMMENU_FONT_BOLD\" \
              --dart-define=BOTTOMMENU_FONT_ITALIC=\"$BOTTOMMENU_FONT_ITALIC\" \
              --dart-define=BOTTOMMENU_ACTIVE_TAB_COLOR=\"$BOTTOMMENU_ACTIVE_TAB_COLOR\" \
              --dart-define=BOTTOMMENU_ICON_POSITION=\"$BOTTOMMENU_ICON_POSITION\" \
              --dart-define=BOTTOMMENU_VISIBLE_ON=\"$BOTTOMMENU_VISIBLE_ON\" \
              --dart-define=IS_DEEPLINK=\"$IS_DEEPLINK\" \
              --dart-define=IS_LOAD_IND=\"$IS_LOAD_IND\" \
              --dart-define=IS_CHATBOT=\"$IS_CHATBOT\" \
              --dart-define=IS_CAMERA=\"$IS_CAMERA\" \
              --dart-define=IS_LOCATION=\"$IS_LOCATION\" \
              --dart-define=IS_BIOMETRIC=\"$IS_BIOMETRIC\" \
              --dart-define=IS_MIC=\"$IS_MIC\" \
              --dart-define=IS_CONTACT=\"$IS_CONTACT\" \
              --dart-define=IS_CALENDAR=\"$IS_CALENDAR\" \
              --dart-define=IS_NOTIFICATION=\"$IS_NOTIFICATION\" \
              --dart-define=IS_STORAGE=\"$IS_STORAGE\" \
              --dart-define=firebase_config_android=\"$firebase_config_android\" \
              --dart-define=firebase_config_ios=\"$firebase_config_ios\" \
              --dart-define=APNS_KEY_ID=\"$APNS_KEY_ID\" \
              --dart-define=APPLE_TEAM_ID=\"$APPLE_TEAM_ID\" \
              --dart-define=APNS_AUTH_KEY_URL=\"$APNS_AUTH_KEY_URL\" \
              --dart-define=KEY_STORE=\"$KEY_STORE\" \
              --dart-define=CM_KEYSTORE_PASSWORD=\"$CM_KEYSTORE_PASSWORD\" \
              --dart-define=CM_KEY_ALIAS=\"$CM_KEY_ALIAS\" \
              --dart-define=CM_KEY_PASSWORD=\"$CM_KEY_PASSWORD\""
          echo "‚úÖ Building APK..."
          flutter build apk --release $DART_DEFINES > flutter_build_apk.log
          if [ $? -ne 0 ]; then
          echo "‚ùå APK build failed"
          cat flutter_build_apk.log
          exit 1
          fi
          echo "‚úÖ APK build completed."
          
          echo "‚úÖ Building AppBundle..."
          flutter build appbundle --release $DART_DEFINES
          if [ $? -ne 0 ]; then
          echo "‚ùå AppBundle build failed"
          exit 1
          fi
          echo "‚úÖ AppBundle build completed."


    - &key_store
      name: Setup Android keystore and insert Gradle signing block (KTS)
      script: |
          echo "üì¶ Setting up Android signing configuration..."
  
          # Validate required environment variables
          : "${KEY_STORE:?Missing KEY_STORE}"
          : "${CM_KEYSTORE_PASSWORD:?Missing CM_KEYSTORE_PASSWORD}"
          : "${CM_KEY_ALIAS:?Missing CM_KEY_ALIAS}"
          : "${CM_KEY_PASSWORD:?Missing CM_KEY_PASSWORD}"
  
          mkdir -p android/app
  
          echo "üì• Downloading keystore..."
          max_attempts=3
          for attempt in $(seq 1 $max_attempts); do
            if curl -fsSL -o android/app/keystore.jks "$KEY_STORE"; then
              echo "‚úÖ Keystore downloaded successfully"
              break
            else
              echo "‚ùå Attempt $attempt failed"
              [ "$attempt" -eq "$max_attempts" ] && exit 1
              sleep 5
            fi
          done
  
          echo "üìù Writing key.properties..."
          cat > android/key.properties <<EOF
          storeFile=keystore.jks
          storePassword=$CM_KEYSTORE_PASSWORD
          keyAlias=$CM_KEY_ALIAS
          keyPassword=$CM_KEY_PASSWORD
          EOF
          
          GRADLE_FILE="android/app/build.gradle.kts"
          echo "üîê Configuring Gradle signing..."
          
          # Inject keystoreProperties block if missing
          if ! grep -q 'val keystoreProperties' "$GRADLE_FILE"; then
          echo "üîß Adding keystoreProperties block..."
          sed -i '1s;^;val keystoreProperties = Properties().apply {\n    load(File(rootProject.rootDir, "android/key.properties").inputStream())\n}\n\n;' "$GRADLE_FILE"
          fi
          
          # Inject signingConfigs block if missing
          if ! grep -q 'signingConfigs' "$GRADLE_FILE"; then
          echo "üîß Injecting signingConfigs block..."
          awk '/android\s*{/{print; print "    signingConfigs {\n        create(\"release\") {\n            storeFile = file(\"keystore.jks\")\n            storePassword = keystoreProperties[\"storePassword\"] as String\n            keyAlias = keystoreProperties[\"keyAlias\"] as String\n            keyPassword = keystoreProperties[\"keyPassword\"] as String\n            enableV1Signing = true\n            enableV2Signing = true\n            enableV3Signing = true\n        }\n    }"; next}1' "$GRADLE_FILE" > tmp && mv tmp "$GRADLE_FILE"
          fi
          
          # Inject buildTypes block if missing
          if ! grep -q "buildTypes" "$GRADLE_FILE"; then
          echo "üîß Injecting buildTypes with release config..."
          awk '/android\s*{/{print; print "    buildTypes {\n        getByName(\"release\") {\n            isMinifyEnabled = true\n            isShrinkResources = true\n            signingConfig = signingConfigs.getByName(\"release\")\n            proguardFiles(getDefaultProguardFile(\"proguard-android-optimize.txt\"), \"proguard-rules.pro\")\n        }\n    }"; next}1' "$GRADLE_FILE" > tmp && mv tmp "$GRADLE_FILE"
          elif ! grep -q "signingConfig = signingConfigs.getByName(\"release\")" "$GRADLE_FILE"; then
          echo "üîß Updating release block to use signingConfig..."
          awk '/buildTypes\s*{/{print; print "        getByName(\"release\") {\n            signingConfig = signingConfigs.getByName(\"release\")\n        }"; next}1' "$GRADLE_FILE" > tmp && mv tmp "$GRADLE_FILE"
          fi
          
          echo "‚úÖ Android signing configuration completed"
          
          echo "üîç Verifying signing setup..."
          [ -f "android/app/keystore.jks" ] && [ -f "android/key.properties" ] && echo "‚úÖ All signing files are ready" || {
          echo "‚ùå Verification failed"
          exit 1
          }

    - &key_store2
      name: Setup Android keystore and insert Gradle signing block (KTS)
      script: |
          echo "üì¶ Setting up Android signing configuration..."
          
          # Validate keystore environment variables
          if [ -z "$KEY_STORE" ] || [ -z "$CM_KEYSTORE_PASSWORD" ] || [ -z "$CM_KEY_ALIAS" ] || [ -z "$CM_KEY_PASSWORD" ]; then
            echo "‚ùå Missing required keystore environment variables"
            echo "Required variables:"
            echo "- KEY_STORE: URL to download keystore"
            echo "- CM_KEYSTORE_PASSWORD: Keystore password"
            echo "- CM_KEY_ALIAS: Key alias"
            echo "- CM_KEY_PASSWORD: Key password"
            exit 1
          fi

          # Create android directory if it doesn't exist
          mkdir -p android/app

          echo "üì• Downloading keystore..."
          # Download with retry logic
          max_attempts=3
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            if curl -f -o android/app/keystore.jks "$KEY_STORE"; then
              echo "‚úÖ Keystore downloaded successfully"
              break
            else
              echo "‚ùå Attempt $attempt failed to download keystore"
              if [ $attempt -eq $max_attempts ]; then
                echo "‚ùå Failed to download keystore after $max_attempts attempts"
                exit 1
              fi
              attempt=$((attempt + 1))
              sleep 5
            fi
          done

          echo "üìù Writing key.properties..."
          cat > android/key.properties <<EOF
          storeFile=keystore.jks
          storePassword=$CM_KEYSTORE_PASSWORD
          keyAlias=$CM_KEY_ALIAS
          keyPassword=$CM_KEY_PASSWORD
          EOF
        
          echo "üîê Configuring Gradle signing..."
          
          GRADLE_FILE="android/app/build.gradle.kts"
          
          # Add keystoreProperties block at the top if not present
          if ! grep -q 'val keystoreProperties' "$GRADLE_FILE"; then
            echo "üîß Adding keystoreProperties block..."
            sed -i '1s;^;val keystoreProperties = Properties().apply {\n    load(File(rootProject.rootDir, "android/key.properties").inputStream())\n}\n\n;' "$GRADLE_FILE"
          else
            echo "‚úÖ keystoreProperties block already present"
          fi
          
          # Inject signingConfigs inside android { ... }
          if ! grep -q 'signingConfigs' "$GRADLE_FILE"; then
            echo "üîß Injecting signingConfigs block..."
            awk '/android\s*{/{print; print "    signingConfigs {\n        create(\"release\") {\n            storeFile = file(\"keystore.jks\")\n            storePassword = keystoreProperties[\"storePassword\"] as String\n            keyAlias = keystoreProperties[\"keyAlias\"] as String\n            keyPassword = keystoreProperties[\"keyPassword\"] as String\n            enableV1Signing = true\n            enableV2Signing = true\n            enableV3Signing = true\n        }\n    }"; next}1' "$GRADLE_FILE" > tmp && mv tmp "$GRADLE_FILE"
          else
            echo "‚úÖ signingConfigs already exists"
          fi
          
          # Inject release buildType with proper configuration
          if grep -q "buildTypes" "$GRADLE_FILE"; then
            if ! grep -q "signingConfig = signingConfigs.getByName(\"release\")" "$GRADLE_FILE"; then
              echo "üîß Updating release buildType configuration..."
              awk '/buildTypes\s*{/{print; print "        getByName(\"release\") {\n            isMinifyEnabled = true\n            isShrinkResources = true\n            signingConfig = signingConfigs.getByName(\"release\")\n            proguardFiles(getDefaultProguardFile(\"proguard-android-optimize.txt\"), \"proguard-rules.pro\")\n        }"; next}1' "$GRADLE_FILE" > tmp && mv tmp "$GRADLE_FILE"
            else
              echo "‚úÖ Release signing configuration already present"
            fi
          else
            echo "‚ùå buildTypes block not found in $GRADLE_FILE"
            exit 1
          fi
          
          echo "‚úÖ Android signing configuration completed"
          
          # Verify the configuration
          echo "üîç Verifying signing configuration..."
          if [ -f "android/app/keystore.jks" ] && [ -f "android/key.properties" ]; then
            echo "‚úÖ Signing files present and configured"
          else
            echo "‚ùå Signing configuration verification failed"
            exit 1
          fi


    - &Update_App_Version
      name: Update Version Info (Android & iOS)
      script: |
        chmod +x ./lib/scripts/update_version.sh
        ./lib/scripts/update_version.sh

    - &inject_keystore
      name: Inject Keystore and Replace build.gradle.kts
      script: |
        ./lib/scripts/inject_keystore.sh

workflows:
  android-free-workflow:
    name: Android Free APK Only
    max_build_duration: 60
    instance_type: mac_mini_m2
    environment:
      flutter: stable
      java: 17
    scripts:
      - name: Make scripts executable (safe)
        script: |
          echo "‚úÖSetting All Script Files Executable with Safe Mode..."
          if [ -d ./lib/scripts ]; then chmod +x ./lib/scripts/*.sh; fi
      - name: Update App Info (Name, Package, Version)
        script: |
          ./lib/scripts/debug_env.sh
          ./lib/scripts/change_proj_name.sh
          ./lib/scripts/change_app_name.sh
          ./lib/scripts/update_package_name.sh
          ./lib/scripts/update_version.sh
          ./lib/scripts/update_sdk_version.sh
      - name: Firebase And Push Notification Setup
        script: |
          ./lib/scripts/get_json.sh
          ./lib/scripts/inject_firebase_services.sh
      - name: Apply Custom Assets (Logo & Splash)
        script: |
          ./lib/scripts/get_logo.sh
          ./lib/scripts/get_splash.sh
      - *set_launcher_icons
      - name: Set Android Permissions
        script: ./lib/scripts/inject_permissions_android.sh

      - name: Build APK Only
        script: ./android_free_build.sh

    artifacts:
      - build/**/outputs/apk/**/*.apk
      - build/app/outputs/flutter-apk/app-release.apk
    publishing:
      *email_release

  android-paid-workflow:
      name: Android Paid APK + AAB
      max_build_duration: 60
      instance_type: mac_mini_m2
      environment:
        flutter: stable
        java: 17
      scripts:
        - name: Make scripts executable (safe)
          script: |
            echo "‚úÖSetting All Script Files Executable with Safe Mode..."
            if [ -d ./lib/scripts ]; then chmod +x ./lib/scripts/*.sh; fi
        - name: Inject Keystore & Gradle Config
          script: |
            echo "‚úÖInject Keystore & Gradle Config..."
            ./lib/scripts/inject_keystore.sh 
            ./lib/scripts/update_gradle_files.sh
#            ./lib/scripts/write_gradle_config.sh


        - name: Update App Info (Name, Package, Version)
          script: |
            ./lib/scripts/debug_env.sh
            ./lib/scripts/change_proj_name.sh
            ./lib/scripts/change_app_name.sh
            ./lib/scripts/update_package_name.sh
            ./lib/scripts/update_version.sh
            ./lib/scripts/update_sdk_version.sh
        - name: Firebase And Push Notification Setup
          script: |
            ./lib/scripts/get_json.sh
            ./lib/scripts/inject_firebase_services.sh
        - name: Apply Custom Assets (Logo & Splash)
          script: |
            ./lib/scripts/get_logo.sh
            ./lib/scripts/get_splash.sh
        - *set_launcher_icons
        - name: Set Android Permissions
          script: ./lib/scripts/inject_permissions_android.sh
        - name: Build APK and AAB
          script: |
              echo "üõ†Ô∏è Starting the build process..."
              ./lib/scripts/build_apk.sh
              ./lib/scripts/build_aab.sh

#        - name: Build APK + AAB
#          script: |
#            ./lib/scripts/android_build.sh
#            ./lib/scripts/build_apk.sh
#            ./lib/scripts/build_aab.sh

        - name: Validate APK Signing
          script: |
            echo "üîç Validating APK signature..."
            $ANDROID_SDK_ROOT/build-tools/*/apksigner verify --verbose build/app/outputs/flutter-apk/app-release.apk

      artifacts:
        - build/**/outputs/apk/**/*.apk
        - build/**/outputs/bundle/**/*.aab
        - build/app/outputs/flutter-apk/app-release.apk
        - build/app/outputs/bundle/release/app-release.aab
      publishing:
        *email_release
  android-workflow:
    name: Android Workflow
    max_build_duration: 60
    instance_type: mac_mini_m1
    environment:
      flutter: stable
      java: 17
    scripts:
      - name: Make scripts executable (safe)
        script: |
          echo "‚úÖSetting All Script Files Executable with Safe Mode..."
          
          if [ -d ./lib/scripts ]; then chmod +x ./lib/scripts/*.sh; fi
      - *debug_env
      - *inject_keystore
      - *permission_android
      - *change_proj_name
      - *update_package_names
      - *change_app_name
      - *Update_SDK_Version
      - *Update_App_Version
#      - *key_store
      - *get_json
      - *Inject_Firebase_Services
      - *get_logo
      - *get_splash
      - *set_launcher_icons
      - name: Build APK and AAB
        script: ./lib/scripts/android_build.sh
#          ./lib/scripts/build.sh
      - name: Validate APK Signing
        script: |
          echo "üîç Validating APK signature..."
          $ANDROID_SDK_ROOT/build-tools/*/apksigner verify --verbose build/app/outputs/flutter-apk/app-release.apk
    artifacts:
      - build/**/outputs/apk/**/*.apk
      - build/**/outputs/bundle/**/*.aab
    publishing:
      *email_release

  ios-workflow:
    name: iOS Workflow
    instance_type: mac_mini_m1
    max_build_duration: 120
    environment:
      flutter: stable
      xcode: latest
      cocoapods: 1.13.0
      vars:
        CERT_CER_URL: $CERT_CER_URL
        CERT_KEY_URL: $CERT_KEY_URL
        CERT_PASSWORD: $CERT_PASSWORD
        KEYCHAIN_PASSWORD: $KEYCHAIN_PASSWORD
        PROFILE_URL: $PROFILE_URL
        BUNDLE_ID: $BUNDLE_ID
        APPLE_TEAM_ID: $APPLE_TEAM_ID
        EMAIL_ID: $EMAIL_ID
        XCODE_WORKSPACE: "ios/Runner.xcworkspace"
        XCODE_SCHEME: "Runner"
    scripts:
      - name: üîê iOS Code Signing Setup
        script: |
          set -euo pipefail
          trap 'echo "‚ùå Error on line $LINENO"' ERR
          
          
          # ‚úÖ Required environment variables
            REQUIRED_VARS=(CERT_CER_URL CERT_KEY_URL CERT_PASSWORD PROFILE_URL KEYCHAIN_PASSWORD CM_BUILD_DIR CM_ENV)
            echo "üîç Validating environment variables..."
            for VAR in "${REQUIRED_VARS[@]}"; do
            [[ -z "${!VAR:-}" ]] && { echo "‚ùå Missing $VAR"; exit 1; }
            echo "‚úÖ $VAR is set"
              done
          
              # üîß Paths
              KEYCHAIN_NAME="ios-build.keychain"
              BUILD_DIR="$CM_BUILD_DIR"
              CERT_CER_PATH="$BUILD_DIR/certificate.cer"
              PRIVATE_KEY_PATH="$BUILD_DIR/private.key"
              P12_PATH="$BUILD_DIR/generated_certificate.p12"
              PROFILE_PATH="$BUILD_DIR/profile.mobileprovision"
          
              mkdir -p "$BUILD_DIR"
          
              echo "üì• Downloading cert, key, and mobileprovision..."
              curl -fsSL -o "$CERT_CER_PATH" "$CERT_CER_URL"
              curl -fsSL -o "$PRIVATE_KEY_PATH" "$CERT_KEY_URL"
              curl -fsSL -o "$PROFILE_PATH" "$PROFILE_URL"
          
              echo "üîê Generating .p12 from cert + key..."
              openssl pkcs12 -export \
              -inkey "$PRIVATE_KEY_PATH" \
              -in "$CERT_CER_PATH" \
              -out "$P12_PATH" \
              -name "Apple Distribution" \
              -certfile "$CERT_CER_PATH" \
              -passout pass:"$CERT_PASSWORD" \
              -legacy
          
              echo "üîê Setting up keychain..."
              security delete-keychain "$KEYCHAIN_NAME" || true
              security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
              security set-keychain-settings -lut 21600 "$KEYCHAIN_NAME"
              security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          
              echo "üîë Importing .p12..."
              security import "$P12_PATH" -k "$KEYCHAIN_NAME" -P "$CERT_PASSWORD" -T /usr/bin/codesign
            security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
            security list-keychains -s "$KEYCHAIN_NAME"
              security default-keychain -s "$KEYCHAIN_NAME"
          
              echo "üì≤ Installing provisioning profile..."
              PROFILE_UUID=$(security cms -D -i "$PROFILE_PATH" | plutil -extract UUID xml1 -o - - | plutil -p - | sed -E 's/.*"([^"]+)".*/\1/')
              PROFILE_NAME=$(security cms -D -i "$PROFILE_PATH" | plutil -extract Name xml1 -o - - | plutil -p - | sed -E 's/.*"([^"]+)".*/\1/')
              mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
              cp "$PROFILE_PATH" ~/Library/MobileDevice/Provisioning\ Profiles/"$PROFILE_UUID".mobileprovision
          
              echo "üìõ Extracting CODE_SIGN_IDENTITY from .p12..."
              EXTRACTED_IDENTITY=$(openssl pkcs12 -in "$P12_PATH" -nokeys -legacy -passin pass:"$CERT_PASSWORD" \
              | openssl x509 -noout -subject | sed -n 's/^subject=.*CN=\(.*\)/\1/p')
          
            if [[ -z "$EXTRACTED_IDENTITY" ]]; then
              echo "‚ùå Failed to extract CODE_SIGN_IDENTITY from .p12"
              exit 1
              fi
              CODE_SIGN_IDENTITY="$EXTRACTED_IDENTITY"
          
              echo "‚úÖ PROFILE_UUID=$PROFILE_UUID"
              echo "‚úÖ PROFILE_NAME=$PROFILE_NAME"
              echo "‚úÖ CODE_SIGN_IDENTITY=$CODE_SIGN_IDENTITY"
          
              # Export to .env for use in xcodebuild
              echo "PROFILE_UUID=$PROFILE_UUID" >> "$CM_ENV"
              echo "PROFILE_NAME=$PROFILE_NAME" >> "$CM_ENV"
              #echo "CODE_SIGN_IDENTITY=$CODE_SIGN_IDENTITY" >> "$CM_ENV"
              #echo "CODE_SIGN_IDENTITY=\"${CODE_SIGN_IDENTITY}\"" >> "$CM_ENV"
          
            # ‚úÖ CERTIFICATE MATCH VALIDATION
            echo "üîç Validating that provisioning profile matches signing cert..."
          
            PROFILE_PLIST="$BUILD_DIR/profile.plist"
            CERT_DER_PATH="$BUILD_DIR/dev_cert.der"
          
            # Decode .mobileprovision into plist
            security cms -D -i "$PROFILE_PATH" > "$PROFILE_PLIST"
          
            # Extract base64 and decode into DER file using awk (safe for multiline)
            CERT_BASE64=$(plutil -extract DeveloperCertificates.0 xml1 -o - "$PROFILE_PLIST" \
            | awk '/<data>/,/<\/data>/' \
            | sed -e 's/<[^>]*>//g' -e 's/^[ \t]*//' \
            | tr -d '\n')
          
            if [[ -z "$CERT_BASE64" ]]; then
            echo "‚ùå Failed to extract base64 certificate data"
            exit 1
            fi
          
            echo "$CERT_BASE64" | base64 -d > "$CERT_DER_PATH"
          
            # Validate extracted certificate
            if ! openssl x509 -inform der -in "$CERT_DER_PATH" -noout > /dev/null 2>&1; then
            echo "‚ùå Extracted certificate is invalid or unreadable"
            exit 1
            fi
          
            echo "‚úÖ Provisioning profile contains a valid Developer Certificate."
          
            DER_HASH=$(openssl x509 -in "$CERT_DER_PATH" -inform der -noout -sha1 -fingerprint)
            CER_HASH=$(openssl x509 -in "$CERT_CER_PATH" -noout -sha1 -fingerprint)
          
            if [[ "$DER_HASH" != "$CER_HASH" ]]; then
            echo "‚ùå Certificate in profile does NOT match imported .cer"
            echo "DER: $DER_HASH"
            echo "CER: $CER_HASH"
            exit 1
            else
            echo "‚úÖ Certificate matches the .cer used to generate the .p12"
            fi
            echo "üéâ iOS code signing setup completed using .cer + .key (no Mac needed!)"



      - *debug_env
      - name: Make scripts executable (safe)
        script: |
          if [ -d ./lib/scripts ]; then chmod +x ./lib/scripts/*.sh; fi
      - *permission_ios
      - *change_proj_name
      - *update_package_names
      - *change_app_name
      - *Update_SDK_Version
      - *Update_App_Version
      - *get_logo
      - *get_splash
      - *set_launcher_icons
      - *Inject_Firebase_iOS_Push
      - name: üì¶ Setup Ruby & CocoaPods
        script: |
          rbenv install 3.3.0 || true
          rbenv global 3.3.0
          gem install cocoapods -v 1.16.2
      - name: üîÑ Clean and reinstall CocoaPods
        script: |
          echo "üì¶ Cleaning and reinstalling CocoaPods..."
          rm -rf ~/Library/Developer/Xcode/DerivedData
          cd ios
          rm -rf Pods Podfile.lock
          pod deintegrate
          pod cache clean --all

          # Workaround for activesupport bug in CocoaPods + Ruby 3.x
          gem uninstall activesupport -a -x || true
          gem install activesupport -v 6.1.7.3

          pod install --repo-update
          cd ..

          echo "üîß Updating Xcode manual signing configuration..."
          cd ios
          ruby <<'RUBY'
          require 'xcodeproj'

          project = Xcodeproj::Project.open('Runner.xcodeproj')
          project.targets.each do |target|
            if target.name == 'Runner'
              target.build_configurations.each do |config|
                config.build_settings['CODE_SIGN_STYLE'] = 'Manual'
                config.build_settings['DEVELOPMENT_TEAM'] = ENV['APPLE_TEAM_ID']
                config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = ENV['PROFILE_NAME']
                config.build_settings['CODE_SIGN_IDENTITY'] = ENV['CODE_SIGN_IDENTITY']
                config.build_settings['CODE_SIGNING_REQUIRED'] = 'YES'
                config.build_settings['CODE_SIGNING_ALLOWED'] = 'YES'
                config.build_settings['EXPANDED_CODE_SIGN_IDENTITY'] = ENV['CODE_SIGN_IDENTITY']
                config.build_settings['CODE_SIGN_INJECT_BASE_ENTITLEMENTS'] = 'YES'
                config.build_settings['CODE_SIGN_ENTITLEMENTS'] = 'Runner/Runner.entitlements'
                config.build_settings['OTHER_CODE_SIGN_FLAGS'] = "--keychain $HOME/Library/Keychains/$KEYCHAIN_NAME-db"
              end
            end
          end

          project.save
          RUBY
          cd ..


      - name: Add Push Notification entitlements if enabled
        script: |
          chmod +x lib/scripts/generate_entitlements.sh
          ./lib/scripts/generate_entitlements.sh



      

      - name: üìù Inject dynamic Podfile
        script: |
          ./lib/scripts/generate_podfile.sh


      - name: üì¶ Install CocoaPods
        script: |
          rm -rf ios/Pods ios/Podfile.lock ~/Library/Caches/CocoaPods ~/.cocoapods/repos
          cd ios
          pod install --repo-update
          cd ..

      - name: Generate ExportOptions Build
        script: |
          echo "‚úÖ Creating ExportOptions.plist:"
            cat > ExportOptions.plist <<EOF
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            <plist version="1.0">
            <dict>
              <key>method</key>
              <string>app-store-connect</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>teamID</key>
              <string>$APPLE_TEAM_ID</string>
              <key>provisioningProfiles</key>
              <dict>
                <key>$BUNDLE_ID</key>
                <string>$PROFILE_NAME</string>
              </dict>
              <key>compileBitcode</key>
              <false/>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>signingCertificate</key>
              <string>$CODE_SIGN_IDENTITY</string>
            </dict>
            </plist>
            EOF

      - name: üîß Inject Pods xcconfig into Release.xcconfig
        script: |
          XC_CONFIG_PATH="ios/Flutter/Release.xcconfig"
          PODS_INCLUDE_LINE='#include? "Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"'
          if grep -Fxq "$PODS_INCLUDE_LINE" "$XC_CONFIG_PATH"; then
            echo "‚úÖ Already included"
          else
            echo -e "\n$PODS_INCLUDE_LINE" >> "$XC_CONFIG_PATH"
            echo "‚úÖ Appended $PODS_INCLUDE_LINE"
          fi
      - name: üß© Flutter Build IOS
        script: |
          set -euo pipefail
          trap 'echo "‚ùå Flutter build failed on line $LINENO"; exit 1' ERR
          flutter clean
          rm -rf ios/Pods ios/Podfile.lock
          cd ios && pod install && cd ..
          flutter build ios --release --no-codesign \
            --dart-define=WEB_URL="$WEB_URL" \
            --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
            --dart-define=PKG_NAME="$PKG_NAME" \
            --dart-define=APP_NAME="$APP_NAME" \
            --dart-define=ORG_NAME="$ORG_NAME" \
            --dart-define=VERSION_NAME="$VERSION_NAME" \
            --dart-define=VERSION_CODE="$VERSION_CODE" \
            --dart-define=EMAIL_ID="$EMAIL_ID" \
            --dart-define=IS_SPLASH="$IS_SPLASH" \
            --dart-define=SPLASH="$SPLASH" \
            --dart-define=SPLASH_BG="$SPLASH_BG" \
            --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
            --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
            --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
            --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
            --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
            --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
            --dart-define=LOGO_URL="$LOGO_URL" \
            --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
            --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
            --dart-define=BOTTOMMENU_BG_COLOR="$BOTTOMMENU_BG_COLOR" \
            --dart-define=BOTTOMMENU_ICON_COLOR="$BOTTOMMENU_ICON_COLOR" \
            --dart-define=BOTTOMMENU_TEXT_COLOR="$BOTTOMMENU_TEXT_COLOR" \
            --dart-define=BOTTOMMENU_FONT="$BOTTOMMENU_FONT" \
            --dart-define=BOTTOMMENU_FONT_SIZE="$BOTTOMMENU_FONT_SIZE" \
            --dart-define=BOTTOMMENU_FONT_BOLD="$BOTTOMMENU_FONT_BOLD" \
            --dart-define=BOTTOMMENU_FONT_ITALIC="$BOTTOMMENU_FONT_ITALIC" \
            --dart-define=BOTTOMMENU_ACTIVE_TAB_COLOR="$BOTTOMMENU_ACTIVE_TAB_COLOR" \
            --dart-define=BOTTOMMENU_ICON_POSITION="$BOTTOMMENU_ICON_POSITION" \
            --dart-define=BOTTOMMENU_VISIBLE_ON="$BOTTOMMENU_VISIBLE_ON" \
            --dart-define=IS_DEEPLINK="$IS_DEEPLINK" \
            --dart-define=IS_LOAD_IND="$IS_LOAD_IND" \
            --dart-define=IS_CAMERA="$IS_CAMERA" \
            --dart-define=IS_LOCATION="$IS_LOCATION" \
            --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
            --dart-define=IS_MIC="$IS_MIC" \
            --dart-define=IS_CONTACT="$IS_CONTACT" \
            --dart-define=IS_CALENDAR="$IS_CALENDAR" \
            --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
            --dart-define=IS_STORAGE="$IS_STORAGE" \
            --dart-define=IS_CHATBOT="$IS_CHATBOT" \
            --dart-define=APNS_KEY_ID="$APNS_KEY_ID" \
            --dart-define=APPLE_TEAM_ID="$APPLE_TEAM_ID" \
            --dart-define=APNS_AUTH_KEY_URL="$APNS_AUTH_KEY_URL" \
            --dart-define=KEY_STORE="$KEY_STORE" \
            --dart-define=CM_KEYSTORE_PASSWORD="$CM_KEYSTORE_PASSWORD" \
            --dart-define=CM_KEY_ALIAS="$CM_KEY_ALIAS" \
            --dart-define=CM_KEY_PASSWORD="$CM_KEY_PASSWORD" \
            --dart-define=CERT_PASSWORD="$CERT_PASSWORD" \
            --dart-define=PROFILE_URL="$PROFILE_URL" \
            --dart-define=CERT_CER_URL="$CERT_CER_URL" \
            --dart-define=CERT_KEY_URL="$CERT_KEY_URL" \
            --dart-define=APP_STORE_CONNECT_KEY_IDENTIFIER="$APP_STORE_CONNECT_KEY_IDENTIFIER" \
            --dart-define=firebase_config_android="$firebase_config_android" \
            --dart-define=firebase_config_ios="$firebase_config_ios"

      - name: üìù Inject dynamic Podfile for xcodebuild
        script: |
          ./lib/scripts/generate_podfile_xcodebuild.sh

      - name: Clean DerivedData
        script: |
          rm -rf ~/Library/Developer/Xcode/DerivedData

      - name: üèó Archive iOS App with Xcode
        script: |
  
              set -euo pipefail
              trap 'echo "‚ùå Flutter build failed on line $LINENO"; exit 1' ERR
              
              echo "üì• Parsing environment from \$CM_ENV"
              while IFS='=' read -r key value; do
              key=$(echo "$key" | xargs)
              value=$(echo "$value" | sed -e 's/^"//' -e 's/"$//' | xargs)
              if [[ -n "$key" ]]; then
              export "$key=$value"
              fi
              done < "$CM_ENV"
              
              # Debug output
              echo "‚úÖ PROFILE_UUID=$PROFILE_UUID"
              echo "‚úÖ PROFILE_NAME=$PROFILE_NAME"
              echo "‚úÖ APPLE_TEAM_ID=$APPLE_TEAM_ID"
              echo "‚úÖ BUNDLE_ID=$BUNDLE_ID"
              
              cd ios
              
              echo "üöÄ Starting Xcode archive..."
          
              xcodebuild -workspace Runner.xcworkspace \
                -scheme Runner \
                -archivePath "$CM_BUILD_DIR/Runner.xcarchive" \
                -sdk iphoneos \
                -configuration Release \
                archive \
                -allowProvisioningUpdates
              
              cd ..
              
              echo "‚úÖ Archive completed successfully"
      - name: üì¶ Export signed IPA
        script: |
          set -euo pipefail
          trap 'echo "‚ùå Flutter build failed on line $LINENO"; exit 1' ERR
          
          echo "‚úÖ Start Exporting:"
          xcodebuild -exportArchive \
          -archivePath "$CM_BUILD_DIR/Runner.xcarchive" \
          -exportPath "$CM_BUILD_DIR/ios_output" \
          -exportOptionsPlist ExportOptions.plist
          
          echo "üì¶ Contents of output directory:"
          ls -lh "$CM_BUILD_DIR/ios_output"
          
          # Find the .ipa file (assumes only one IPA file)
          IPA_PATH=$(find "$CM_BUILD_DIR/ios_output" -name "*.ipa" | head -1)
          
          if [[ -f "$IPA_PATH" ]]; then
            echo "‚úÖ IPA generated at: $IPA_PATH"
          else
            echo "‚ùå IPA file was not generated!"
            exit 1
          fi

      - name: Upload to TestFlight
        script: |
          echo "üì• Loading environment from $CM_ENV"
          set -a
          source "$CM_ENV"
          set +a
               echo "‚úÖ PROFILE_UUID=$PROFILE_UUID"
               echo "‚úÖ PROFILE_NAME=$PROFILE_NAME"
               #echo "‚úÖ CODE_SIGN_IDENTITY=$CODE_SIGN_IDENTITY"
          echo "üöÄ Uploading to TestFlight..."
          xcrun altool --upload-app \
          --type ios \
          --file "$IPA_PATH" \
          --apiKey "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
          --apiIssuer "$APP_STORE_CONNECT_ISSUER_ID"
    artifacts:
      - build/ios_output/Runner.ipa
      - build/ios/ipa/*.ipa
      - build/ios/archive/Runner.xcarchive
      - flutter_build_ios.log
      - build/ios/iphoneos/Runner.app
      - $CM_BUILD_DIR/ios_output/*.ipa
      - $CM_BUILD_DIR/*.p12
      - $CM_BUILD_DIR/*.*
      - $CM_BUILD_DIR/ios_output/*.*
      - /tmp/xcodebuild_logs/*.log
    #      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    #    artifacts:
    #      - build/ios/iphoneos/Runner.app
    #      - build/ios/ipa/*.ipa
    #      - /tmp/xcodebuild_logs/*.log
    #      - flutter_build_ios.log
    #      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM

    publishing:
      *email_release

